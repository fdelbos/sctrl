// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ResponseReader is an autogenerated mock type for the ResponseReader type
type ResponseReader struct {
	mock.Mock
}

// AssertLine provides a mock function with given fields: _a0
func (_m *ResponseReader) AssertLine(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssertOK provides a mock function with given fields:
func (_m *ResponseReader) AssertOK() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLine provides a mock function with given fields:
func (_m *ResponseReader) GetLine() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadLineWithOk provides a mock function with given fields:
func (_m *ResponseReader) ReadLineWithOk() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewResponseReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewResponseReader creates a new instance of ResponseReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResponseReader(t mockConstructorTestingTNewResponseReader) *ResponseReader {
	mock := &ResponseReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
