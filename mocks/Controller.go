// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	sctrl "github.com/fdelbos/sctrl"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// Command provides a mock function with given fields: _a0, _a1
func (_m *Controller) Command(_a0 string, _a1 sctrl.ResponseHandler) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, sctrl.ResponseHandler) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommandWithTimeout provides a mock function with given fields: _a0, _a1, _a2
func (_m *Controller) CommandWithTimeout(_a0 string, _a1 time.Duration, _a2 sctrl.ResponseHandler) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration, sctrl.ResponseHandler) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewController interface {
	mock.TestingT
	Cleanup(func())
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewController(t mockConstructorTestingTNewController) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
